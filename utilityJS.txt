import {ajax as Ajax, ajaxSetup as AjaxSetup} from 'jquery';

export const ajax = Ajax;

export const ajaxSetup = AjaxSetup;

export const deepCopy = function (src, c) {
    var c = c || {};
    for (var i in src) {
        if (typeof src[i] === 'object' && src[i] != null) {
            c[i] = (src[i].constructor === Array) ? [] : {};
            deepCopy(src[i], c[i]);
        } else {
            c[i] = src[i];
        }
    }
    return c;
};

export const createConversationID = function () {
    var ran = Math.floor(Math.random() * 100000 + 1)
    return add0(ran, 10);
};

export const createContributionID = function () {
    var ran = Math.floor(Math.random() * 100000 + 1)
    return add0(ran, 10);
};

export const createMessageID = function () {
    var ran = Math.floor(Math.random() * 100000 + 1)
    return add0(ran, 10);
};


export const scanID = function (text) {
    //var regex = new RegExp('/(\\w+)\\s*$', 'i');
    //var match = regex.exec(text);
    //if (match != null && match.length > 1) {
    //    return match[1];
    //}
    //return null;
    return text !== undefined
        ? text.split('/').pop()
        : null;
};

export const handlerRegister = function (obj, fns) {
    fns.forEach((fn) => {
        obj[fn.name.replace(/(\w)/, function (v) {
            return v.toLowerCase()
        })] = fn.instance().handler;
    });
};

function add0(num, length) {
    var reslut = "" + num;
    var oldLength = length - reslut.length;
    for (var i = 0; i < oldLength; i++) {
        reslut = "0" + reslut;
    }
    return reslut;
}

export const isArray = function (json) {
    return json && typeof json === 'object' &&
        Array == json.constructor
};

export const regExp = function (str) {
    return new RegExp(`^${str}$`, 'i')
};

export const Base64 = {
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    encode: function (e) {
        var t = "";
        var n, r, i, s, o, u, a;
        var f = 0;
        e = Base64._utf8_encode(e);
        while (f < e.length) {
            n = e.charCodeAt(f++);
            r = e.charCodeAt(f++);
            i = e.charCodeAt(f++);
            s = n >> 2;
            o = (n & 3) << 4 | r >> 4;
            u = (r & 15) << 2 | i >> 6;
            a = i & 63;
            if (isNaN(r)) {
                u = a = 64
            } else if (isNaN(i)) {
                a = 64
            }
            t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)
        }
        return t
    },
    decode: function (e) {
        var t = "";
        var n, r, i;
        var s, o, u, a;
        var f = 0;
        e = e.replace(/[^A-Za-z0-9+/=]/g, "");
        while (f < e.length) {
            s = this._keyStr.indexOf(e.charAt(f++));
            o = this._keyStr.indexOf(e.charAt(f++));
            u = this._keyStr.indexOf(e.charAt(f++));
            a = this._keyStr.indexOf(e.charAt(f++));
            n = s << 2 | o >> 4;
            r = (o & 15) << 4 | u >> 2;
            i = (u & 3) << 6 | a;
            t = t + String.fromCharCode(n);
            if (u != 64) {
                t = t + String.fromCharCode(r)
            }
            if (a != 64) {
                t = t + String.fromCharCode(i)
            }
        }
        t = Base64._utf8_decode(t);
        return t
    },
    _utf8_encode: function (e) {
        e = e.replace(/rn/g, "n");
        var t = "";
        for (var n = 0; n < e.length; n++) {
            var r = e.charCodeAt(n);
            if (r < 128) {
                t += String.fromCharCode(r)
            } else if (r > 127 && r < 2048) {
                t += String.fromCharCode(r >> 6 | 192);
                t += String.fromCharCode(r & 63 | 128)
            } else {
                t += String.fromCharCode(r >> 12 | 224);
                t += String.fromCharCode(r >> 6 & 63 | 128);
                t += String.fromCharCode(r & 63 | 128)
            }
        }
        return t
    },
    _utf8_decode: function (e) {
        var t = "";
        var n = 0;
        var r = 0;
        var c1 = 0;
        var c2 = 0;
        while (n < e.length) {
            r = e.charCodeAt(n);
            if (r < 128) {
                t += String.fromCharCode(r);
                n++
            } else if (r > 191 && r < 224) {
                c2 = e.charCodeAt(n + 1);
                t += String.fromCharCode((r & 31) << 6 | c2 & 63);
                n += 2
            } else {
                c2 = e.charCodeAt(n + 1);
                c3 = e.charCodeAt(n + 2);
                t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
                n += 3
            }
        }
        return t
    }
};

