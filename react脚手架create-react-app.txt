脚手架地址：https://github.com/facebookincubator/create-react-app

package.json文件（没有eject前的配置）

一、scripts字段：
npm-run-all：安装 npm install --save npm-run-all
作用：可以同时执行多条npm run命令，该例子中同时执行了npm run watch-css和npm run start-js。参数-p表示parallel，同时运行几个命令。-s表示sequential命令串行执行。也可以使用两个&运行多个命令：npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive或者npm run build-css && react-scripts build

二、react-scripts：该脚手架的命令 安装：npm install --save react-scripts
1、node_modules--》
2、react-scripts--》
3、bin（bin的作用就是让nodejs命令可以全局执行，看有道笔记）--》
4、react-scripts（process.argv得到的是一个数组。该数组的第一个成员是“node”，第二个成员是nodejs执行的文件名，剩下的成员就是传入到要执行的js文件中的参数。比如说：node argv.js tom 1992 24 这个命令，console一下process.argv得到的是
[ 'D:\\nodejs\\node.exe',
  'E:\\node\\argv',
  'js',
  'tom',
  '1992',
  '24' ]。即使用了第3步中的bin设置js全局执行，process.argv也是一样的结果）--》
5、（5.1、cross-spawn是一个跨平台的node spawn工具。nodejs自带的spawn有一些问题：https://www.npmjs.com/package/cross-spawn所以要用cross-spawn
    5.2、spawn用于生成子进程。http://nodejs.cn/api/child_process.html
    5.3、父进程和子进程之间的通信，参考javascript高级程序设计第三版中关于webworker的通信方式，也可以参考：http://nodejs.cn/api/child_process.html#child_process_child_send_message_sendhandle_options_callback）--》
6、scripts--》start.js--》
7、react-dev-utils工具包
（7.1、clearconsole 清空控制台信息，判断操作系统平台，通过stdout.write输出来清空控制台
代码中的'\x1Bc' : '\x1B[2J\x1B[3J\x1B[H'是“ansi屏幕控制码”---https://en.wikipedia.org/wiki/ANSI_escape_code
参考：http://etian4ever.blog.163.com/blog/static/27355765200962210398981/
https://segmentfault.com/q/1010000009587005/a-1020000009640646
https://stackoverflow.com/questions/15011478/ansi-questions-x1b25h-and-x1be
关于stdout.write和console.log的区别
其实console.log就是调用的stdout.write。
https://stackoverflow.com/questions/4976466/difference-between-process-stdout-write-and-console-log-in-node-js
7.2、checkRequiredFiles查找文件是否存在
7.3、choosePort--"detect-port-alt"nodejs中检测端口的工具：https://www.npmjs.com/package/detect-port-alt
7.4、url工具、address工具等nodejs工具，很多需要用的工具都可以在npmjs上找到。
7.5、webpack的nodejs API配置v3：https://webpack.js.org/api/node/和v1，http://webpack.github.io/docs/node.js-api.html
7.6、webpack-dev-server的nodejs配置new WebpackDevServer(compiler, {...})。
v3：https://webpack.js.org/configuration/dev-server/
v2：http://webpack.github.io/docs/webpack-dev-server.html
7.7、openBrowser--opn：https://www.npmjs.com/package/opn）--》
8、config--》
9、webpack.config.dev.js
10、
10.1 autoprefixer为不同的浏览器的css增加前缀。
10.2 case-sensitive-paths-webpack-plugin在使用require引入模块的时候，路径强制大小写敏感，如果大小写不敏感，在OSX系统中可能会带来麻烦。
10.3 InterpolateHtmlPlugin这是react-create-app自己封装的一个plugin，作用就是可以在html中使用变量，具体看react-dev-utils/interpolalteHtmlPlugin.js中的注释说明。
10.4 WatchMissingNodeModulesPlugin这是react-create-app自己封装的一个plugin，作用是当使用npm install安装一个模块的时候，项目会自动重新构建，具体看react-dev-utils/WatchMissingNodeModulesPlugin.js中的注释说明
10.5 eslintFormatter 这是eslint-loader的配置选项。如果编辑器中有了eslint检查，是不是就可以不用eslint-loader了？
10.6 ModuleScopePlugin
11、config/env
11.1  require（‘fs’）和require（‘path’）这两个是nodejs内置模块，不必单独安装
11.2 require（‘./path’）
12、 config/path
12.1 require('url') url模块，用来解析url。
12.2 endsWith这是es6的语法
12.3 config/path.js用来返回各种文件的路径。
13、回到config/env
13.1 dotEnv模块的作用是将process.env中的环境变量放到.env文件中，而不是放到代码中，方便管理。详情看npm官网。
13.2 有个这种用法[].filter(Boolean);这里的Boolean是一个类型，同时他也是一个函数，比如说String，string（3）可以吧数字3转换成字符串‘3’。这里的Boolean也是这个道理，filter里面的函数要求三个参数，但是只传一个也可以。所以上面这条语句就是说，如果数组里面的值可以转化成true就保留下来。
https://stackoverflow.com/questions/30016773/javascript-filter-true-booleans
14 回到scripts/start.js
14.1 react-dev-utils/WebpackDevServerUtils
14.1.1 detect-port-alt 用来检测端口是否被使用的工具
14.1.2 is-root 检测process是否是根用户在调用
14.1.3 inquirer 命令行工具的集合
14.1.4 formatWebpackMessages这个是对webpack输出的信息进行格式化处理
14.1.5 getProcessForPort 用来判断process使用的端口是否被使用过了。
14.1.6

node-sass-chokidar：安装 npm install --save node-sass-chokidar
npmjs地址：https://www.npmjs.com/package/node-sass-chokidar
这个包实际上是对node-sass的优化（node-sass：https://www.npmjs.com/package/node-sass）。node-sass的作用是用nodejs编译sass文件成CSS。但是node-sass有一些问题：https://github.com/paulmillr/chokidar
